 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var path = require('path');
var app = express();
var monthMapArray = ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.get("/", function(req, res){
  res.sendFile(path.join(__dirname + '/views/index.html'));
});

app.get("/:dateInput", function(req, res){
  var dateInput = req.params.dateInput,
      responseData = {
        unix: null,
        natural: null
      };
  if(!dateInput){
  }
  else if(!/\D/.test(dateInput) || /-\d+/.test(dateInput)){
    var jsDate = new Date(parseInt(dateInput));
    responseData.unix = jsDate.getTime();
    responseData.natural = monthMapArray[jsDate.getMonth()] + " " + jsDate.getDay() + ", " + jsDate.getFullYear();
  }
  else{
    getNaturalDate(dateInput, responseData);
  }
  res.send(responseData);
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

function getNaturalDate(dateInput, responseData){
  var respMonth,
      respDay,
      respYear,
      isNumericalMonth = true;
  
  monthMapArray.forEach(function(month, index){
    var monthIndex = dateInput.toLowerCase().indexOf(month.toLowerCase());
    if(monthIndex > -1){
      respMonth = index;
      isNumericalMonth = false;
    }
  });
  
  var numNumericalStrings = dateInput.match( /\d+/g || [] ).length;
  
  if(!isNumericalMonth && numNumericalStrings === 2){
    
      var dateNumsStrings = dateInput.match(/\d+/g);
  

    
      var dateNums = [];
    
    dateNumsStrings.forEach(function(numString, index, array){
        dateNums.push(parseInt(numString));
      });
          
      var largestNum = Math.max.apply(Math, dateNums);
    
      if(largestNum > 31){
        respYear = dateNums[dateNums.indexOf(largestNum)];
        dateNums.splice(dateNums.indexOf(largestNum), 1)
        respDay = dateNums[0];
      }
      else{
        respDay = dateNums[0];
        respYear = dateNums[1];
      }
  }
  else if(isNumericalMonth && numNumericalStrings === 3){
    var yearStringArr = dateInput.match(/\d\d\d\d/);
    if(yearStringArr)
      var respYear = parseInt(yearStringArr[0]);
      if(respYear){
        
      var dateNumsStrings = dateInput.match(/\d+/g);
      var dateNums = [];
        dateNumsStrings.forEach(function(numString, index, array){
        dateNums.push(parseInt(numString));
      });
        
          dateNumsStrings.splice(dateNums.indexOf(respYear), 1);
          respDay = dateNums[0];
          respMonth = dateNums[1] - 1;
          respYear = dateNums[2];
                
      }
    else{
      return responseData;
    }

  }
  else{
    return responseData;
  }
  
  
  if(checkIfDateValid(respDay, respMonth, respYear)){
      var returnDate = new Date(respYear, respMonth, respDay, 0, 0, 0, 0);
      responseData.unix = returnDate.getTime();
      responseData.natural = monthMapArray[returnDate.getMonth()] +" "+ returnDate.getDate() + ", " + returnDate.getFullYear();

  }
  else{
      return responseData;
  }
  
  return responseData;
}

function checkIfDateValid(day,month,year){
  var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  if ((!(year % 4) && year % 100) || !(year % 400)) {
    daysInMonth[1] = 29;
  }
  return (year > 0 && month > -1 && month <= 11 && day > 0 && day <= daysInMonth[month]);
}